// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let buffer = Array.new(maxLength);
        } else {
            let buffer = 0;
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (buffer > 0) {
            do buffer.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let buffer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let buffer[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, loopCounter;
        var boolean negate;
        var char c;
        let value = 0;
        let negate = charAt(0) = 45;
        let loopCounter = 0;
        if (negate) {
            // Skip negative sign.
            let loopCounter = 1;
        }
        while (loopCounter < length) {
            let c = charAt(loopCounter);
            if ((c < 48) | (c > 57)) {
                return value;
            }
            let value = 10 * value + (c - 48);
            let loopCounter = loopCounter + 1;
        }
        if (negate) {
            let value = -value;
        }
        return value;
    }

    method void shiftRight() {
        var int i;
        let i = length;
        let length = length + 1;
        while (i > 0) {
            let buffer[i] = buffer[i - 1];
            let i = i - 1;
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean negative, doLoop;
        let length = 0;
        let negative = false;
        if (val < 0) {
            let negative = true;
            let val = -val;
        }
        let doLoop = true;
        while (doLoop) {
            do shiftRight();
            let buffer[0] = 48 + (val - (val / 10 * 10));
            let val = val / 10;
            let doLoop = val > 0;
        }
        if (negative) {
            do shiftRight();
            let buffer[0] = 45;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
